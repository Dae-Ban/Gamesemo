<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.ReviewMapper">

    <!-- 리뷰 게시글 매핑 -->
    <resultMap id="reviewResult" type="com.example.demo.model.Review">
        <result property="rb_num" column="rb_num"/>
        <result property="id" column="id"/>
        <result property="rb_title" column="rb_title"/>
        <result property="rb_content" column="rb_content"/>
        <result property="rb_readcount" column="rb_readcount"/>
        <result property="rb_date" column="rb_date"/>
        <result property="rb_state" column="rb_state"/>
        <result property="rb_like" column="rb_like"/>
        <result property="nickname" column="nickname"/>
    </resultMap>

    <!-- 댓글 매핑 -->
    <resultMap id="replyResultMap" type="com.example.demo.model.ReviewReply">
        <result property="rbr_num" column="RBR_NUM"/>
        <result property="rb_num" column="RB_NUM"/>
        <result property="id" column="ID"/>
        <result property="rbr_content" column="RBR_CONTENT"/>
        <result property="rbr_date" column="RBR_DATE"/>
        <result property="rbr_state" column="RBR_STATE"/>
    </resultMap>

    <!-- 게시글 카운트 -->
    <select id="getCount" parameterType="com.example.demo.model.Review" resultType="int">
    SELECT COUNT(*) 
    FROM REVIEW_BOARD rb
    JOIN MEMBER m ON rb.id = m.id
    <where>
        rb.rb_state != 2
        <choose>
            <when test="search == 'rb_title'">
                AND rb.rb_title LIKE '%' || #{keyword} || '%'
            </when>
            <when test="search == 'id'">
                AND m.nickname LIKE '%' || #{keyword} || '%'
            </when>
            <when test="search == 'all'">
                AND (rb.rb_title LIKE '%' || #{keyword} || '%' 
                     OR rb.rb_content LIKE '%' || #{keyword} || '%')
            </when>
            <when test="search == 'rb_state_recommend'">
                    AND rb_like = '추천'
            </when>
        </choose>
    </where>
    </select>

    <!-- 페이징 목록 -->
    <select id="getPagedList" parameterType="com.example.demo.model.Pagenation" resultMap="reviewResult">
        SELECT * FROM (
        SELECT rownum rnum, a.* FROM (
            SELECT 
                rb.rb_num,
                m.nickname AS nickname,
                rb.rb_title,
                rb.rb_readcount,
                rb.rb_date,
                rb.rb_state,
                rb.rb_content,
                rb.rb_like
            FROM REVIEW_BOARD rb
            JOIN MEMBER m ON rb.id = m.id
            <where>
                rb.rb_state != 2
                <choose>
                    <when test="search == 'rb_title'">
                        AND rb.rb_title LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="search == 'id'">
                        AND m.nickname LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="search == 'all'">
                        AND (rb.rb_title LIKE '%' || #{keyword} || '%' OR rb.rb_content LIKE '%' || #{keyword} || '%')
                    </when>
                    <when test="search == 'rb_state_recommend'">
                    AND rb_like = '추천'
            		</when>
                </choose>
            </where>
            ORDER BY rb.rb_num DESC
        ) a
        WHERE rownum &lt;= #{endRow}
    )
    WHERE rnum &gt;= #{startRow}
    </select>

    <!-- 상세보기 -->
    <select id="getReview" parameterType="int" resultMap="reviewResult">
        SELECT 
        rb.rb_num,
        rb.id,
	    rb.rb_title,
	    rb.rb_readcount,
	    rb.rb_date,
	    rb.rb_state,
	    rb.rb_content,
	    m.nickname AS nickname
        FROM REVIEW_BOARD rb
        JOIN MEMBER m ON rb.id = m.id WHERE rb_num = #{rb_num}
    </select>

    <!-- 조회수 증가 -->
    <update id="updateReadCount" parameterType="int">
        UPDATE REVIEW_BOARD
        SET rb_readcount = rb_readcount + 1
        WHERE rb_num = #{rb_num}
    </update>

    <!-- 글 등록 -->
    <insert id="insert" parameterType="com.example.demo.model.Review">
        INSERT INTO REVIEW_BOARD (
            rb_num, id, rb_title, rb_content,
            rb_readcount, rb_date, rb_state, rb_like
        ) VALUES (
            review_board_seq.NEXTVAL,
            #{id}, #{rb_title}, #{rb_content},
            0, SYSDATE, #{rb_state}, #{rb_like}
        )
    </insert>

    <!-- 글 수정 -->
    <update id="update" parameterType="com.example.demo.model.Review">
        UPDATE REVIEW_BOARD
        SET rb_title = #{rb_title},
            rb_content = #{rb_content},
            rb_like = #{rb_like}
        WHERE rb_num = #{rb_num}
    </update>

    <!-- 글 삭제 (논리삭제) -->
    <update id="delete" parameterType="int">
        UPDATE REVIEW_BOARD
        SET rb_state = 2
        WHERE rb_num = #{rb_num}
    </update>

    <!-- 댓글 등록 -->
    <insert id="insertReply" parameterType="replyBoard">
        INSERT INTO RB_REPLY (
            RBR_NUM, RB_NUM, ID, RBR_CONTENT, RBR_DATE, RBR_STATE
        ) VALUES (
            rb_reply_seq.NEXTVAL, #{rb_num}, #{id}, #{rbr_content}, SYSDATE, #{rbr_state}
        )
    </insert>

    <!-- 댓글 목록 -->
    <select id="getReplyList" parameterType="int" resultMap="replyResultMap">
        SELECT * FROM RB_REPLY WHERE RB_NUM = #{rb_num} AND rbr_state = 0 ORDER BY RBR_DATE DESC
    </select>

    <!-- 댓글 수정 -->
    <update id="replyupdate" parameterType="replyBoard">
        UPDATE RB_REPLY
        SET RBR_CONTENT = #{rbr_content}, rbr_date = SYSDATE
        WHERE rbr_num = #{rbr_num}
    </update>

    <!-- 댓글 삭제 -->
    <update id="deleteReply" parameterType="int">
        UPDATE RB_REPLY
        SET rbr_state = 1
        WHERE rbr_num = #{rbr_num}
    </update>

    <!-- 게시글 상태 변경 -->
    <update id="updateBoardState">
        UPDATE REVIEW_BOARD
        SET rb_state = #{state}
        WHERE rb_num = #{rb_num}
    </update>

    <!-- 글 추천 4개 리스트 -->
    <select id="getTopRecommended" resultMap="reviewResult">
    SELECT rb_num, nickname AS nickname, rb_title,
           DBMS_LOB.SUBSTR(rb_content, 4000, 1) AS rb_content,
           rb_readcount, rb_date, rb_state, rb_like
    FROM (
        SELECT rb.rb_num, m.nickname,
               rb.rb_title,
               DBMS_LOB.SUBSTR(rb.rb_content, 4000, 1) AS rb_content,
               rb.rb_readcount,
               rb.rb_date,
               rb.rb_state,
               rb.rb_like,
               COUNT(rl.rb_num) AS like_count
        FROM REVIEW_BOARD rb
        JOIN MEMBER m ON rb.id = m.id
        LEFT JOIN RB_LIKE rl ON rb.rb_num = rl.rb_num
        WHERE rb.rb_state = 0
        GROUP BY rb.rb_num, m.nickname,
                 rb.rb_title,
                 DBMS_LOB.SUBSTR(rb.rb_content, 4000, 1),
                 rb.rb_readcount, rb.rb_date, rb.rb_state, rb.rb_like
        ORDER BY like_count DESC, rb.rb_readcount DESC
    )
    WHERE ROWNUM &lt;= 4
</select>


    <!-- 추천 여부 체크 -->
    <select id="checkAlreadyLiked" parameterType="reviewLike" resultType="reviewLike">
        SELECT * FROM RB_LIKE WHERE id = #{id} AND rb_num = #{rb_num}
    </select>

    <!-- 추천 삽입 -->
    <insert id="insertLike" parameterType="reviewLike">
        INSERT INTO RB_LIKE(r_like, id, rb_num)
        VALUES(rb_like_seq.NEXTVAL, #{id}, #{rb_num})
    </insert>

    <!-- 추천 개수 조회 -->
    <select id="getLikeCount" parameterType="int" resultType="int">
        SELECT COUNT(*) FROM RB_LIKE WHERE rb_num = #{rb_num}
    </select>

</mapper>