<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.MemberMapper">


	<!-- 회원가입 -->
	<insert id="insert"
		parameterType="com.example.demo.model.Member">
		INSERT INTO MEMBER (
		ID, NAME, NICKNAME, PW, BIRTH_DATE,
		EMAIL_ID, EMAIL_DOMAIN,
		SOCIAL_PLATFORM, SOCIAL_ID,
		PHONE,
		GENDER,
		EMAIL_AD, EMAIL_VERIFIED,
		JOIN_DATE, STATE
		)
		VALUES (
		#{id},
		#{name},
		#{nickname}, #{pw}, #{birthDate},
		#{emailId}, #{emailDomain},
		#{socialPlatform, jdbcType=VARCHAR}, #{socialId, jdbcType=VARCHAR},
		#{phone}, #{gender},
		#{emailAd}, #{emailVerified},
		SYSDATE, #{state}
		)
	</insert>

	<!-- ID 중복 확인 -->
	<select id="countById" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM member
		WHERE id = #{id}
		AND state = 0  <!-- 활성 회원만 -->
	</select>

	<!-- 닉네임 중복 확인 -->
	<select id="countByNickname" parameterType="String"
		resultType="int">
		SELECT COUNT(*) FROM member WHERE nickname = #{nickname}
	</select>


	<!-- 이메일 중복 확인 -->
	<select id="selectByEmailForRegister" parameterType="string"
		resultType="com.example.demo.model.Member">
		SELECT * FROM member
		WHERE email_id || '@' || email_domain = #{email}
		AND state = 0  <!-- 추가: 탈퇴 제외 -->
	</select>


	<!-- 로그인 : 영교님꺼 추가 -->
	<select id="login" parameterType="String" resultType="member">
		SELECT *
		FROM MEMBER
		WHERE ID = #{id}
		AND state IN (0, 2) <!-- 상태값 0,2 회원만 로그인 가능 -->
	</select>

	<select id="findByEmail" resultType="member">
		SELECT * FROM
		MEMBER WHERE EMAIL_ID = #{emailId} AND EMAIL_DOMAIN =
		#{emailDomain}
	</select>
	
	<insert id="socialInsert" parameterType="member">
    INSERT INTO MEMBER 
        (ID, NAME, NICKNAME, PW, BIRTH_DATE, EMAIL_ID, EMAIL_DOMAIN, SOCIAL_PLATFORM, SOCIAL_ID, PHONE, GENDER, JOIN_DATE, STATE, EMAIL_AD, EMAIL_VERIFIED)
    VALUES 
        (#{id}, #{name}, '회원_'||TO_CHAR(seq_member_nickname.nextval), #{pw, jdbcType=VARCHAR}, #{birthDate}, #{emailId}, #{emailDomain}, #{socialPlatform}, #{socialId}, #{phone}, #{gender}, SYSDATE, #{state}, #{emailAd}, #{emailVerified})
</insert>


	<!-- 회원정보 수정 -->
	<update id="updateMember"
		parameterType="com.example.demo.model.Member">
		UPDATE member
		SET
		name = #{name},
		nickname = #{nickname},
		phone =
		#{phone},
		email_id = #{emailId},
		email_domain = #{emailDomain},
		gender =
		#{gender}
		<if test="birthDate != null and birthDate != ''">
			, birth_date = TO_DATE(#{birthDate}, 'YYYY-MM-DD')
		</if>
		WHERE id = #{id}
	</update>

	<!-- 회원정보 수정 후 최신 정보 조회 -->
	<select id="selectMemberById" parameterType="String"
		resultType="com.example.demo.model.Member">
		SELECT * FROM member WHERE id = #{id}
	</select>

	<!-- 아이디/비밀번호 찾기용 이메일 -->
	<select id="selectByEmailForFind" parameterType="string"
		resultType="com.example.demo.model.Member">
		SELECT
		id AS id,
		email_id AS emailId,
		email_domain AS
		emailDomain
		FROM member
		WHERE email_id || '@' || email_domain =
		#{email}
	</select>

	<select id="selectByIdAndEmail"
		resultType="com.example.demo.model.Member">
		SELECT * FROM member
		WHERE id = #{id}
		AND email_id || '@' ||
		email_domain = #{email}
	</select>
	
	<!--  아이디/비번찾기  -->
	<select id="findById" resultType="com.example.demo.model.Member"
		parameterType="String">
		SELECT * FROM member WHERE id = #{id}
	</select>
	<!-- 비밀번호 변경 -->
	<update id="updatePassword"
		parameterType="com.example.demo.model.Member">
		UPDATE member
		SET pw = #{pw}
		WHERE id = #{id}
	</update>

	<!-- 비번찾기에서 비번번경 -->
	<update id="updatePasswordForFind" parameterType="map">
		UPDATE member
		SET pw = #{newPw}
		WHERE id = #{id}
	</update>


	<!-- 회원 탈퇴 : 실제 DB삭제 안하고 상태값만 바꿈 -->
	<update id="deleteMember" parameterType="String">
		UPDATE member
		SET state
		=
		1
		WHERE id = #{id}
		AND state = 0
	</update>


</mapper>