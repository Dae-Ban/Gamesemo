<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.MemberMapper">
	<select id="selectAllEmailSubscribers"
		resultType="com.example.demo.model.Member">
		SELECT * FROM MEMBER WHERE EMAIL_AD = 'Y'
	</select>
	
	<!-- 회원가입 -->
	<insert id="insertMember"
		parameterType="com.example.demo.model.Member">
		INSERT INTO member (
		id, name, nickname, pw, birth_date,
		email_id, email_domain,
		phone, gender,
		join_date, state, email_ad,
		email_verified
		) VALUES (
		#{id}, #{name}, #{nickname}, #{pw},
		#{birthDate},
		#{emailId}, #{emailDomain},
		#{phone}, #{gender},
		SYSDATE,
		0, #{emailAd}, 'n'
		)
	</insert>
	
	<!-- 닉네임 중복 확인 -->
	<select id="countByNickname" parameterType="String"
		resultType="int">
		SELECT COUNT(*) FROM member WHERE nickname = #{nickname}
	</select>

	<select id="findByEmail" resultType="com.example.demo.model.Member">
		SELECT * FROM member
		WHERE email_id || '@' || email_domain = #{email}
	</select>
	
	<select id="findById" parameterType="String"
		resultType="com.example.demo.model.Member">
		SELECT * FROM member WHERE id = #{id}
	</select>
	
	<!-- (1) 이메일 중복 확인 -->
	<select id="selectByEmailForRegister" parameterType="string" resultType="com.example.demo.model.Member">
		SELECT * FROM member WHERE (email_id || '@' || email_domain) = #{email}
	</select>
	
	<!-- 회원정보 수정 -->
	<update id="updateMember"
		parameterType="com.example.demo.model.Member">
		UPDATE member
		SET
		name = #{name},
		nickname = #{nickname},
		phone =
		#{phone},
		email_id = #{emailId},
		email_domain = #{emailDomain},
		gender =
		#{gender}
		<if test="birthDate != null and birthDate != ''">
			, birth_date = TO_DATE(#{birthDate}, 'YYYY-MM-DD')
		</if>
		WHERE id = #{id}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePassword"
		parameterType="com.example.demo.model.Member">
		UPDATE member
		SET pw = #{pw}
		WHERE id = #{id}
	</update>

	<!-- 비번찾기에서 비번 번경 -->
	<update id="updatePasswordForFind" parameterType="map">
		UPDATE member
		SET pw = #{newPw}
		WHERE id = #{id}
	</update>
	
	<!-- 회원 탈퇴 : 실제 DB삭제 안하고 상태값만 바꿈 -->
	<update id="deleteMember" parameterType="String">
		UPDATE member
		SET state
		=
		1
		WHERE id = #{id}
		AND state = 0
	</update>
</mapper>


