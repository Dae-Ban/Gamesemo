<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.mapper.VerifyMapper">
	<insert id="insertVerification"
		parameterType="com.example.demo.model.AccountVerification">
		INSERT INTO ACCOUNT_VERIFICATION (
		NUM,
		ID,
		CODE,
		TYPE,
		EXPIRES_AT,
		VERIFIED,
		CREATED_AT
		) VALUES (
		SEQ_ACCOUNT_VERIFICATION.NEXTVAL,
		#{id},
		#{code},
		#{type},
		#{expiresAt},
		'N',
		SYSTIMESTAMP
		)
	</insert>

	<select id="findByCode" parameterType="map"
		resultType="com.example.demo.model.AccountVerification">
		SELECT *
		FROM ACCOUNT_VERIFICATION
		WHERE CODE = #{code}
		AND
		TYPE = #{type}
	</select>

	<update id="updateEmailVerified">
		UPDATE MEMBER
		SET EMAIL_VERIFIED = 'Y'
		WHERE ID = (
		SELECT ID
		FROM ACCOUNT_VERIFICATION
		WHERE CODE = #{code}
		AND TYPE
		=
		'MEMBER_JOIN'
		)
	</update>

	<!-- <update id="updateVerificationTable" parameterType="String"> -->
	<!-- UPDATE -->
	<!-- ACCOUNT_VERIFICATION -->
	<!-- SET VERIFIED = 'Y', USED_AT = SYSTIMESTAMP -->
	<!-- WHERE CODE = #{code} -->
	<!-- AND TYPE = -->
	<!-- 'MEMBER_JOIN' -->
	<!-- </update> -->

	<update id="updateVerificationTable" parameterType="map">
		UPDATE
		ACCOUNT_VERIFICATION
		SET VERIFIED = 'Y', USED_AT = SYSTIMESTAMP
		WHERE
		CODE = #{code}
		AND TYPE = #{type}
	</update>

	<insert id="insertTestMember"
		parameterType="com.example.demo.model.Member">
		INSERT INTO member (
		id,
		name,
		nickname,
		pw,
		birth_date,
		email_id,
		email_domain,
		phone,
		gender,
		join_date,
		state,
		email_ad,
		email_verified
		) VALUES (
		#{id},
		#{name},
		#{nickname},
		#{pw},
		#{birthDate},
		#{emailId},
		#{emailDomain},
		#{phone},
		#{gender},
		#{joinDate},
		#{state},
		#{emailAd},
		#{emailVerified}
		)
	</insert>

	<select id="findIdMember" parameterType="String"
		resultType="com.example.demo.model.Member">
		SELECT * FROM MEMBER WHERE (email_id || '@' ||
		email_domain) = #{email}
	</select>

	<select id="isEmailExist" resultType="boolean">
		SELECT CASE
		WHEN COUNT(*) >
		0 THEN 1
		ELSE 0
		END
		FROM MEMBER
		WHERE (email_id || '@' || email_domain) =
		#{email}
	</select>

<!-- 사용안함 -->
<!-- 	<select id="findByIdAndType" resultType="AccountVerification"> -->
<!-- 		SELECT * -->
<!-- 		FROM ( -->
<!-- 		SELECT * -->
<!-- 		FROM ACCOUNT_VERIFICATION -->
<!-- 		WHERE id = #{id} AND type = #{type} -->
<!-- 		ORDER BY -->
<!-- 		created_at DESC -->
<!-- 		) -->
<!-- 		WHERE ROWNUM = 1 -->
<!-- 	</select> -->
	
	<select id="findByEmailAndType"
		resultType="com.example.demo.model.AccountVerification">
		SELECT *
		FROM (
		SELECT av.*
		FROM ACCOUNT_VERIFICATION av
		JOIN MEMBER m ON av.id = m.id
		WHERE (m.email_id || '@' || m.email_domain) = #{email}
		AND av.type =
		#{type}
		ORDER BY av.created_at DESC
		)
		WHERE ROWNUM = 1
	</select>



</mapper>
